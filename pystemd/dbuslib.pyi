# Copyright (c) 2020-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the license found in the LICENSE file in
# the root directory of this source tree.
#

from typing import Any, AnyStr, Callable, Dict, Iterable, List, Optional, Tuple

def apply_signature(signature: bytes, values: List[Any]) -> List[Any]: ...
def compile_simple(arg: bytes) -> Tuple[bytes, Callable]: ...
def compile_array(arg: bytes) -> Tuple[bytes, Callable]: ...
def compile_struct(arg: bytes) -> Tuple[bytes, Callable]: ...
def compile_args(arg: bytes) -> List[bytes]: ...
def find_closure(args: bytes, open: int, close: int) -> int: ...
def path_encode(prefix: bytes, external_id: bytes) -> bytes: ...
def path_decode(path: bytes, prefix: bytes) -> bytes: ...

class VariableReturn(object):
    def __init__(
        self, parent: Optional["VariableReturn"] = None, v_type: Optional[int] = None
    ) -> None: ...
    def create_child(self, v_type: Optional[int] = None) -> Any: ...
    def append(self, dt: Any) -> None: ...
    def dump(self) -> Iterable[Tuple[Any, Any]]: ...

class DbusMessage:
    body: List[Any]
    headers: Dict[bytes, bytes]
    def is_empty(self) -> bool: ...
    def is_signal(self, interface: bytes, member: bytes) -> bool: ...
    def process_reply(self, with_headers: bool) -> None: ...

class DBus:
    def __init__(
        self, path: Optional[bytes] = None, user_mode: bool = False
    ) -> None: ...
    def __enter__(self) -> "DBus": ...
    def close(self) -> None: ...
    def open(self) -> None: ...
    def call_method(
        self,
        destination: AnyStr,
        path: AnyStr,
        interface: AnyStr,
        method: AnyStr,
        args: Any,
    ) -> Any: ...
    def get_fd(self) -> int: ...
    def get_unique_name(self) -> bytes: ...
    def match_signal(
        self,
        sender: AnyStr,
        path: Optional[AnyStr],
        interface: AnyStr,
        member: AnyStr,
        callback: Any,
        userdata: Optional[Any],
    ) -> None: ...
    def process(self) -> DbusMessage: ...
    def wait(self, timeout: int) -> None: ...

class DBusAddress(DBus):
    def __init__(self, address: bytes, peer_to_peer: bool = False) -> None: ...
    def open(self) -> None: ...

class DBusMachine(DBus):
    def __init__(self, path: Optional[bytes] = None) -> None: ...
